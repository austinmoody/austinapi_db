// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package austinapi_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addHeartRate = `-- name: AddHeartRate :exec
INSERT INTO heartrate (date, low, high, average) VALUES ($1, $2, $3, $4) ON CONFLICT (date) DO UPDATE SET low = EXCLUDED.low, high = EXCLUDED.high, average = EXCLUDED.average
`

type AddHeartRateParams struct {
	Date    pgtype.Date
	Low     pgtype.Int4
	High    pgtype.Int4
	Average pgtype.Int4
}

func (q *Queries) AddHeartRate(ctx context.Context, arg AddHeartRateParams) error {
	_, err := q.db.Exec(ctx, addHeartRate,
		arg.Date,
		arg.Low,
		arg.High,
		arg.Average,
	)
	return err
}

const addPreparedness = `-- name: AddPreparedness :exec
INSERT INTO preparedness (date, rating) VALUES ($1, $2) ON CONFLICT (date) DO UPDATE SET rating = EXCLUDED.rating
`

type AddPreparednessParams struct {
	Date   pgtype.Date
	Rating pgtype.Int4
}

func (q *Queries) AddPreparedness(ctx context.Context, arg AddPreparednessParams) error {
	_, err := q.db.Exec(ctx, addPreparedness, arg.Date, arg.Rating)
	return err
}

const addSleep = `-- name: AddSleep :exec
INSERT INTO sleep (date, rating, total_duration) VALUES ($1, $2, $3) ON CONFLICT (date) DO UPDATE SET total_duration = EXCLUDED.total_duration, rating = EXCLUDED.rating
`

type AddSleepParams struct {
	Date          pgtype.Date
	Rating        pgtype.Int4
	TotalDuration pgtype.Int8
}

func (q *Queries) AddSleep(ctx context.Context, arg AddSleepParams) error {
	_, err := q.db.Exec(ctx, addSleep, arg.Date, arg.Rating, arg.TotalDuration)
	return err
}

const addSleepDuration = `-- name: AddSleepDuration :exec
INSERT INTO sleep (date, total_duration) VALUES ($1, $2) ON CONFLICT (date) DO UPDATE SET total_duration = EXCLUDED.total_duration
`

type AddSleepDurationParams struct {
	Date          pgtype.Date
	TotalDuration pgtype.Int8
}

func (q *Queries) AddSleepDuration(ctx context.Context, arg AddSleepDurationParams) error {
	_, err := q.db.Exec(ctx, addSleepDuration, arg.Date, arg.TotalDuration)
	return err
}

const addSleepRating = `-- name: AddSleepRating :exec
INSERT INTO sleep (date, rating) VALUES ($1, $2) ON CONFLICT (date) DO UPDATE SET rating = EXCLUDED.rating
`

type AddSleepRatingParams struct {
	Date   pgtype.Date
	Rating pgtype.Int4
}

func (q *Queries) AddSleepRating(ctx context.Context, arg AddSleepRatingParams) error {
	_, err := q.db.Exec(ctx, addSleepRating, arg.Date, arg.Rating)
	return err
}

const addSpo2 = `-- name: AddSpo2 :exec
INSERT INTO spo2 (date, average_spo2) VALUES ($1, $2) ON CONFLICT (date) DO UPDATE SET average_spo2 = EXCLUDED.average_spo2
`

type AddSpo2Params struct {
	Date        pgtype.Date
	AverageSpo2 pgtype.Float8
}

func (q *Queries) AddSpo2(ctx context.Context, arg AddSpo2Params) error {
	_, err := q.db.Exec(ctx, addSpo2, arg.Date, arg.AverageSpo2)
	return err
}

const addStress = `-- name: AddStress :exec
INSERT INTO stress (date, high_stress_duration) VALUES ($1, $2) ON CONFLICT (date) DO UPDATE SET high_stress_duration = EXCLUDED.high_stress_duration
`

type AddStressParams struct {
	Date               pgtype.Date
	HighStressDuration pgtype.Int4
}

func (q *Queries) AddStress(ctx context.Context, arg AddStressParams) error {
	_, err := q.db.Exec(ctx, addStress, arg.Date, arg.HighStressDuration)
	return err
}
